A <- Adj4
lclust(A, 3)
lclust(A, 2)
draw(A, groups = lclust(A, 2))
draw(A, groups = lclust(A, 2))
lclust(A, 2)
groups <- lclust(A, 2)
colors = topo.colors(length(groups))
cols <- rep(0, length(groups))
cols <- rep(0, nrow(A))
for (i in 1:length(groups)) {
cols[groups[[i]]] <- colors[i]
}
g <- graph.adjacency(A, mode = "undirected")
plot.igraph(g, vertex.color = cols, vertex.size = 20,
vertex.label.color = "black", main = main)
main = ""
cols <- rep(0, nrow(A))
for (i in 1:length(groups)) {
cols[groups[[i]]] <- colors[i]
}
g <- graph.adjacency(A, mode = "undirected")
plot.igraph(g, vertex.color = cols, vertex.size = 20,
vertex.label.color = "black", main = main)
legend(x = "bottomleft", legend = paste("N =", length(groups)), bty = "n")
lclust(3)
lclust(A, 3)
lclust(A, 1)
draw <- function(A = matrix(), groups = list(), colors = topo.colors(length(groups)), main = "") {
if (! "package:igraph" %in% search() ) library("igraph")
cols <- rep(0, nrow(A))
for (i in 1:length(groups)) {
cols[groups[[i]]] <- colors[i]
}
g <- graph.adjacency(A, mode = "undirected")
plot.igraph(g, vertex.color = cols, vertex.size = 20,
vertex.label.color = "black", main = main)
legend(x = "bottomleft", legend = paste("N =", length(groups)), bty = "n")
}
draw(A, lclust(A,1))
(9.8-9.5)/sqrt(0.25/12 + 0.36/20)
2 + c(-1,1)*sqrt(20)/sqrt(12)*1.96
52 + c(-1,1)*sqrt(20)/sqrt(12)*1.96
sqrt(12)*(52-64)/sqrt(20)
lclust(A,3)
lclust(A,2)
draw(A, lclust(A,2))
lclust <- function(A = matrix(), n = 1) {
global <- list()
if (n == 1) return(firstPass(A))
else {
for (i in 1:n) {
global[[i]] <- firstPass(A)
if (i < n) {
S <- agregate(firstPass(A), A)
A <- S
}
if (i > 1 & sum(global[[i]] == global[[i-1]]) == length(global[[i-1]]) )
}
levels <- length(global)
for(j in levels:2) {
res <- list()
upper <- global[[j]]
lower <- global[[j-1]]
for (k in 1:length(upper) ) {
id <- upper[[k]]
add <- combine(lower, id)
res <- append(res, list(add))
}
global[[j - 1]] <- res
global[[j]] <- NULL
}
for (i in 1:length(global[[1]])) {
global[[1]][[i]] <- sort(global[[1]][[i]])
}
return(global[[1]])
}
}
A
global
global[[1]] <- firstPass(A)
global <- list()
global[[1]] <- firstPass(A)
lclust <- function(A = matrix(), n = 1) {
global <- list()
if (n == 1) return(firstPass(A))
else {
for (i in 1:n) {
if (i > 1 & !(sum(global[[i]] == global[[i-1]]) == length(global[[i-1]])) ) {
global[[i]] <- firstPass(A)
if (i < n) {
S <- agregate(firstPass(A), A)
A <- S
}
}
}
levels <- length(global)
for(j in levels:2) {
res <- list()
upper <- global[[j]]
lower <- global[[j-1]]
for (k in 1:length(upper) ) {
id <- upper[[k]]
add <- combine(lower, id)
res <- append(res, list(add))
}
global[[j - 1]] <- res
global[[j]] <- NULL
}
for (i in 1:length(global[[1]])) {
global[[1]][[i]] <- sort(global[[1]][[i]])
}
return(global[[1]])
}
}
lclust(A, 1)
i = 3
paste("It's useless to do more than", i-1, "steps")
lclust <- function(A = matrix(), n = 1) {
global <- list()
if (n == 1) return(firstPass(A))
else {
for (i in 1:n) {
if (i > 1 & !(sum(global[[i]] == global[[i-1]]) == length(global[[i-1]])) ) {
global[[i]] <- firstPass(A)
if (i < n) {
S <- agregate(firstPass(A), A)
A <- S
}
}
else {
print(paste("It's useless to do more than", i-1, "steps"))
break
}
}
levels <- length(global)
for(j in levels:2) {
res <- list()
upper <- global[[j]]
lower <- global[[j-1]]
for (k in 1:length(upper) ) {
id <- upper[[k]]
add <- combine(lower, id)
res <- append(res, list(add))
}
global[[j - 1]] <- res
global[[j]] <- NULL
}
for (i in 1:length(global[[1]])) {
global[[1]][[i]] <- sort(global[[1]][[i]])
}
return(global[[1]])
}
}
A <- Adj1 + Adj2 + Adj3 + Adj4 + Adj5
lclust(A)
lclust(A, 4)
lclust(A, 2)
lclust <- function(A = matrix(), n = 1) {
global <- list()
if (n == 1) return(firstPass(A))
else {
for (i in 1:n) {
global[[i]] <- firstPass(A)
if (i > 1 & !(sum(global[[i]] == global[[i-1]]) == length(global[[i-1]])) ) {
if (i < n) {
S <- agregate(firstPass(A), A)
A <- S
}
}
else {
global[[i]] <- NULL
print(paste("It's useless to do more than", i-1, "steps"))
break
}
}
levels <- length(global)
for(j in levels:2) {
res <- list()
upper <- global[[j]]
lower <- global[[j-1]]
for (k in 1:length(upper) ) {
id <- upper[[k]]
add <- combine(lower, id)
res <- append(res, list(add))
}
global[[j - 1]] <- res
global[[j]] <- NULL
}
for (i in 1:length(global[[1]])) {
global[[1]][[i]] <- sort(global[[1]][[i]])
}
return(global[[1]])
}
}
lclust(A, 3)
lclust <- function(A = matrix(), n = 1) {
global <- list()
if (n == 1) return(firstPass(A))
else {
for (i in 1:n) {
global[[i]] <- firstPass(A)
if (i > 1 & !( sum(global[[i]] == global[[i-1]]) == length(global[[i-1]]) ) ) {
if (i < n) {
S <- agregate(firstPass(A), A)
A <- S
}
}
else {
global[[i]] <- NULL
print(paste("It's useless to do more than", i-1, "steps"))
break
}
}
levels <- length(global)
for(j in levels:2) {
res <- list()
upper <- global[[j]]
lower <- global[[j-1]]
for (k in 1:length(upper) ) {
id <- upper[[k]]
add <- combine(lower, id)
res <- append(res, list(add))
}
global[[j - 1]] <- res
global[[j]] <- NULL
}
for (i in 1:length(global[[1]])) {
global[[1]][[i]] <- sort(global[[1]][[i]])
}
return(global[[1]])
}
}
lclust(A, 2)
lclust(A, 1)
lclust(A, 2)
lclust <- function(A = matrix(), n = 1) {
global <- list()
if (n == 1) return(firstPass(A))
else {
for (i in 1:n) {
global[[i]] <- firstPass(A)
if (i < n) {
S <- agregate(firstPass(A), A)
A <- S
}
}
levels <- length(global)
for(j in levels:2) {
res <- list()
upper <- global[[j]]
lower <- global[[j-1]]
for (k in 1:length(upper) ) {
id <- upper[[k]]
add <- combine(lower, id)
res <- append(res, list(add))
}
global[[j - 1]] <- res
global[[j]] <- NULL
}
for (i in 1:length(global[[1]])) {
global[[1]][[i]] <- sort(global[[1]][[i]])
}
return(global[[1]])
}
}
lclust(A, 4)
choose(4,2)*1/5^2 * 0.8^2
pnorm(2*sqrt(2))
sqrt(2)
pnorm(1.414)
0.5 - 1.5*0.4
lclust(A,3)
A <- Adj1
lclust(A,2)
lclust(A, 3)
colnames(Adj1) <- short
h <- read.table("~/Desktop/trial.txt")
j <- read.table("~/Desktop/trial2.txt")
names <- c( "ALGERIA", "ARGENTINA", "BRAZIL", "CHINA", "CZECHOSLOVAKIA",
"ECUADOR", "EGYPT", "ETHIOPIA", "FINLAND", "HONDURAS",
"INDONESIA", "ISRAEL", "JAPAN", "LIBERIA", "MADAGASCAR",
"NEW_ZEALAND", "PAKISTAN", "SPAIN", "SWITZERLAND", "SYRIA",
"THAILAND", "UNITED_KINGDOM", "UNITED_STATES", "YUGOSLAVIA" )
short <- c( "ALG", "ARG", "BRA", "CHI", "CZE",
"ECU", "EGY", "ETH", "FIN", "HON",
"IND", "ISR", "JAP", "LIB", "MAD",
"NZ", "PAK", "SPA", "SWI", "SYR",
"THA", "UK", "US", "YUG" )
colnames(Adj4) <- short
A <- Adj4
A
draw(A, lclust(A))
draw <- function(A = matrix(), groups = list(), colors = terrain.colors(length(groups)), main = "") {
if (! "package:igraph" %in% search() ) library("igraph")
cols <- rep(0, nrow(A))
for (i in 1:length(groups)) {
cols[groups[[i]]] <- colors[i]
}
g <- graph.adjacency(A, mode = "undirected")
plot.igraph(g, vertex.color = cols, vertex.size = 20,
vertex.label.color = "black", main = main)
legend(x = "bottomleft", legend = paste("N =", length(groups)), bty = "n")
}
draw(A, lclust(A, 2))
draw(A, lclust(A))
draw(A, lclust(A))
lclust(A)
draw(A, lclust(A, 3))
# main function
draw(A, lclust(A, 2))
library(malikar)
((200-650*400/1000)^2/650/400 + (150-650*200/1000)^2/650/200 + (300-650*400/1000)^2/650/400 + (200-350*400/1000)^2/350/400 + (50-350*200/1000)^2/350/200 + (100-350*400/1000)^2/350/400)*1000
qchisq(df = 2, 0.95)
qchisq(df = 2, p = 0.95)
2*(40*log(2/9) + 60*log(7/18) - 100*ln(1/3) )
2*(40*log(2/9) + 60*log(7/18) - 100*log(1/3) )
2*(40*log(2/5) + 60*log(3/10) - 100*log(1/3) )
-40/4*25 - 30/9*100
30/9*100
-30/9*100 - 30/9*100
m <- matrix(c(583.333, 333.333, 333.333, 666.666), 2, 2)
solve(M)
solve(m)
0.002400001 + 0.002100002*4 + 4 *-0.001200000
sqrt(0.006)
150/2.25
library("dplyr")
h <- read.table("~/Desktop/trial.txt")
j <- read.table("~/Desktop/trial2.txt")
short <- c( "ALG", "ARG", "BRA", "CHI", "CZE",
"ECU", "EGY", "ETH", "FIN", "HON",
"IND", "ISR", "JAP", "LIB", "MAD",
"NZ", "PAK", "SPA", "SWI", "SYR",
"THA", "UK", "US", "YUG" )
colnames(h) <- names
table1 <- as.matrix( h[1:24,] )
# foods
table2 <- as.matrix( h[25:48, ] )
# crude materials
table3 <- as.matrix( h[49:72, ] )
# minerals
table4 <- as.matrix( h[73:96, ] )
# diplomatic exchange
table5 <- as.matrix( h[97:120, ] )
Adj1 <- matrix(rep(0, 24*24), 24, 24)
Adj2 <- matrix(rep(0, 24*24), 24, 24)
Adj3 <- matrix(rep(0, 24*24), 24, 24)
Adj4 <- matrix(rep(0, 24*24), 24, 24)
Adj5 <- matrix(rep(0, 24*24), 24, 24)
for(i in 1:24) {
Adj1[i,] <- table1[i, ] + table1[ ,i]
Adj1[i, grepl(2, Adj1[i,])] <- 1
Adj2[i,] <- table2[i, ] + table2[ ,i]
Adj2[i, grepl(2, Adj2[i,])] <- 1
Adj3[i,] <- table3[i, ] + table3[ ,i]
Adj3[i, grepl(2, Adj3[i,])] <- 1
Adj4[i,] <- table4[i, ] + table4[ ,i]
Adj4[i, grepl(2, Adj4[i,])] <- 1
Adj5[i,] <- table5[i, ] + table5[ ,i]
Adj5[i, grepl(2, Adj5[i,])] <- 1
}
colnames(Adj1) <- short
colnames(Adj2) <- short
colnames(Adj3) <- short
colnames(Adj4) <- short
colnames(Adj5) <- short
setwd("~/Desktop")
saveRDS(Adj1, "ManGoods")
getwd
getwd()
save(Adj1, file = "ManGoods.Rda")
Adj1 <- matrix(rep(0, 24*24), 24, 24)
Adj2 <- matrix(rep(0, 24*24), 24, 24)
Adj3 <- matrix(rep(0, 24*24), 24, 24)
Adj4 <- matrix(rep(0, 24*24), 24, 24)
Adj5 <- matrix(rep(0, 24*24), 24, 24)
for(i in 1:24) {
Adj1[i,] <- table1[i, ] + table1[ ,i]
Adj1[i, grepl(2, Adj1[i,])] <- 1
Adj2[i,] <- table2[i, ] + table2[ ,i]
Adj2[i, grepl(2, Adj2[i,])] <- 1
Adj3[i,] <- table3[i, ] + table3[ ,i]
Adj3[i, grepl(2, Adj3[i,])] <- 1
Adj4[i,] <- table4[i, ] + table4[ ,i]
Adj4[i, grepl(2, Adj4[i,])] <- 1
Adj5[i,] <- table5[i, ] + table5[ ,i]
Adj5[i, grepl(2, Adj5[i,])] <- 1
}
colnames(Adj1) <- short
colnames(Adj2) <- short
colnames(Adj3) <- short
colnames(Adj4) <- short
colnames(Adj5) <- short
Adj1 <- matrix(rep(0, 24*24), 24, 24)
Adj2 <- matrix(rep(0, 24*24), 24, 24)
Adj3 <- matrix(rep(0, 24*24), 24, 24)
Adj4 <- matrix(rep(0, 24*24), 24, 24)
Adj5 <- matrix(rep(0, 24*24), 24, 24)
for(i in 1:24) {
Adj1[i,] <- table1[i, ] + table1[ ,i]
Adj1[i, grepl(2, Adj1[i,])] <- 1
Adj2[i,] <- table2[i, ] + table2[ ,i]
Adj2[i, grepl(2, Adj2[i,])] <- 1
Adj3[i,] <- table3[i, ] + table3[ ,i]
Adj3[i, grepl(2, Adj3[i,])] <- 1
Adj4[i,] <- table4[i, ] + table4[ ,i]
Adj4[i, grepl(2, Adj4[i,])] <- 1
Adj5[i,] <- table5[i, ] + table5[ ,i]
Adj5[i, grepl(2, Adj5[i,])] <- 1
}
colnames(Adj1) <- short
colnames(Adj2) <- short
colnames(Adj3) <- short
colnames(Adj4) <- short
colnames(Adj5) <- short
save(Adj2, file = "Foods.Rda")
save(Adj3, file = "Crude.Rda")
save(Adj4, file = "Minerals.Rda")
save(Adj5, file = "Diplom.Rda")
0.3/sqrt(0.25/13 + 0.36/28)
5*log(1/17) + 80*log(16/17) - 5*log(1/28) - 80*log(27/28)
(5*log(1/17) + 80*log(16/17) - 5*log(1/28) - 80*log(27/28))*2
pchisq(0.95, df = 1)
qchisq(0.95,df=§)
qchisq(0.95,df=1)
qt(df = 19, 0.975)
30/9*100
-40/4*25 - 30/(1-2/5-3/10)^2
-30/9*100 - 333.333
solve(matrix(583.5,333.333333,333.3333333,666.6666666), nrow = 2, byrow = TRUE)
solve(matrix(583.5,333.333333,333.3333333,666.6666666), nrows = 2, byrow = TRUE)
solve(matrix(583.5,333.333333,333.3333333,666.6666666, nrows = 2, byrow = TRUE))
solve(matrix(583.5,333.333333,333.3333333,666.6666666, nrow = 2, byrow = TRUE))
solve(matrix(c(583.5,333.333333,333.3333333,666.6666666), nrow = 2, byrow = TRUE))
4*0.00209976 + 0.00239904 + 4 *-0.00119952
c <- 1:100
c2 <- 1:100
A <- c %*% t(c)
image(A)
lclust(A, 3)
A <- c %*% t(100:1)
lclust(A, 3)
q
View(A)
setwd("~/Kirill/GitRepo/lclust")
setwd("/Users/Kirill/GitRepo/lclust")
getwd()
library("devtools")
library("roxygen2")
dev_mode()
document()
dev_off()
dev(mode)
dev_mode()
dev_mode()
document()
document()
document()
document()
dev_mode()
install_github("kponomarev/lclust")
lclust(Adj1, n= 2)
lclust(Adj4, n= 2)
draw(A = Adj4, groups = lclust(A, 2))
draw(A = Adj4, groups = lclust(Adj4, 2))
library(lclust)
A <- matrix(c(0,4,2,4,0,0,2,0,0), c, c)
A <- matrix(c(0,4,2,4,0,0,2,0,0), 3, 3)
image(A)
lclust(A)
lclust(A, 2)
load(Crude)
B <- matrix(c(0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0), 4, 4)
image)B
image(B)
groups <- as.list(c(1, 3), c(2, 4))
draw(B, groups)
groups
groups <- list(c(1, 3), c(2, 4))
groups
draw(B, groups)
draw(B, lclust(B))
draw(B, lclust(B, 2))
dev_mode()
library(devtools)
dev_mode()
document()
dev_mode()
install_github("kponomarev/lclust")
library(lclust)
dev_mode()
document()
dev_mode()
dev_mode()
document()
dev_mode()
library("devtools")
library("roxygen2")
dev_mode()
dev_mode()
library(lclust)
dev_mode()
document()
document()
document()
document()
dev_mode()
install_github("kponomarev/lclust")
library(lclust)
dev_mode()
dev_mode()
